int initJoystick()
{
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	
	// Trim Hat
	MapKey(&Joystick, H1U, ACT_PITCH_DOWN);
	
	MapKey(&Joystick, H1R, ACT_YAW_RIGHT);
	
	MapKey(&Joystick, H1D, ACT_PITCH_UP);
	
	MapKey(&Joystick, H1L, ACT_YAW_LEFT);

	// TMS 4-Way 

	MapKeyIO(&Joystick, H2U, 
		ACT_SHIELD_BANK,
		ACT_PANEL_COMMS
	);
	
	MapKeyIO(&Joystick, H2R, 
		ACT_CHAFF,
		ACT_PANEL_INTERNAL
	);
	
	MapKeyIO(&Joystick, H2D, 
		ACT_HEATSINK,
		ACT_PANEL_ROLE
	);
	
	MapKeyIO(&Joystick, H2L, 
		ACT_ECM,
		ACT_PANEL_EXTERNAL
	);

	// DMS 4-Way
	MapKeyIOUMD(&Joystick, H3U,
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, ENG);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, ENG);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS);"),           DELAY_TEMPO)
	);
	
	MapKeyIOUMD(&Joystick, H3R, 
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, WEP);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, SYS, WEP, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, WEP);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, SYS, WEP, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, ENG, WEP, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, ENG);"),           DELAY_TEMPO)
	);
	
	MapKey(&Joystick, H3D, PULSE+ACT_PIP_RESET);
	
	MapKeyIOUMD(&Joystick, H3L,
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, SYS);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, SYS);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP);"),           DELAY_TEMPO)
	);

	// CMS 4-Way w. push button
	MapKeyIO(&Joystick, H4U,
		ACT_LANDING_GEAR,
		ACT_UI_UP // Bound to boost as well
	);
	
	MapKeyIO(&Joystick, H4R,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_NEXT_FIRE_GROUP
		),	
		ACT_UI_RIGHT // Bound to supercruise as well
	);
	
	MapKeyIO(&Joystick, H4D,
		ACT_CARGO_SCOOP,
		ACT_UI_DOWN // Bound to supercruise toggle as well
	);
	
	MapKeyIO(&Joystick, H4L,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_PREV_FIRE_GROUP 
		),
		ACT_UI_LEFT // Bound to 75% engines as well
	);
	
	MapKeyIO(&Joystick, H4P,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_HUD_MODE
		),
		ACT_UI_SELECT 
	);
	
	// Trigger 
	MapKey(&Joystick, TG1, EXEC("fireTriggerOne();"));
	MapKey(&Joystick, TG2, EXEC("fireTriggerTwo();"));
	
	MapKeyR(&Joystick, TG1, EXEC("releaseTriggerOne();"));
	MapKeyR(&Joystick, TG2, EXEC("releaseTriggerTwo();"));
	
	// Weapon Release
	
	MapKeyIO(&Joystick, S2, 
		ACT_HARDPOINTS,
		ACT_SECONDARY_FIRE
	);
	
	// MMC Button 
	MapKey(&Joystick, S1, PULSE+ACT_UI_BACK);
	
	// NWS Button 
	MapKey(&Joystick, S3, 0);
	
	// Pinkie Lever 
	MapKey(&Joystick, S4, 0); // DO NOT USE - Set as Shift IO
}