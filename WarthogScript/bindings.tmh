int initAxis()
{
	MapAxis(&Joystick, JOYX, DX_X_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	
	MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS);
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS);
	
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);
	
	MapAxis(&Throttle, SCX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	MapAxis(&Throttle, SCY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
}

// Joystick  

int initJoystick()
{
	// Trim Hat
	MapKey(&Joystick, H1U, ACT_PITCH_DOWN);
	
	MapKey(&Joystick, H1R, ACT_YAW_RIGHT);
	
	MapKey(&Joystick, H1D, ACT_PITCH_UP);
	
	MapKey(&Joystick, H1L, ACT_YAW_LEFT);

	// TMS 4-Way 

	MapKeyIO(&Joystick, H2U, 
		ACT_SHIELD_BANK,
		ACT_PANEL_COMMS
	);
	
	MapKeyIO(&Joystick, H2R, 
		ACT_CHAFF,
		ACT_PANEL_INTERNAL
	);
	
	MapKeyIO(&Joystick, H2D, 
		ACT_HEATSINK,
		ACT_PANEL_ROLE
	);
	
	MapKeyIO(&Joystick, H2L, 
		ACT_ECM,
		ACT_PANEL_EXTERNAL
	);

	// DMS 4-Way
	MapKeyIOUMD(&Joystick, H3U,
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, ENG);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, ENG);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS, ENG, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_ENGINE, EXEC("setPipConfig(ENG, SYS);"),           DELAY_TEMPO)
	);
	
	MapKeyIOUMD(&Joystick, H3R, 
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, WEP);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, SYS, WEP, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, WEP);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, SYS, WEP, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, ENG, WEP, ENG);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_WEAPON, EXEC("setPipConfig(WEP, ENG);"),           DELAY_TEMPO)
	);
	
	MapKey(&Joystick, H3D, PULSE+ACT_PIP_RESET);
	
	MapKeyIOUMD(&Joystick, H3L,
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, SYS);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, SYS);"),           DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, SYS);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP, SYS, WEP);"), DELAY_TEMPO),
		TEMPO(PULSE+ACT_PIP_SYSTEM, EXEC("setPipConfig(SYS, WEP);"),           DELAY_TEMPO)
	);

	// CMS 4-Way w. push button
	MapKeyIO(&Joystick, H4U,
		ACT_LANDING_GEAR,
		ACT_UI_UP // Bound to boost as well
	);
	
	MapKeyIO(&Joystick, H4R,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_NEXT_FIRE_GROUP
		),	
		ACT_UI_RIGHT // Bound to supercruise as well
	);
	
	MapKeyIO(&Joystick, H4D,
		ACT_CARGO_SCOOP,
		ACT_UI_DOWN // Bound to supercruise toggle as well
	);
	
	MapKeyIO(&Joystick, H4L,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_PREV_FIRE_GROUP 
		),
		ACT_UI_LEFT // Bound to 75% engines as well
	);
	
	MapKeyIO(&Joystick, H4P,
		CHAIN(
			EXEC("clearTriggerLock();"),
			ACT_HUD_MODE
		),
		ACT_UI_SELECT 
	);
	
	// Trigger 
	MapKey(&Joystick, TG1, EXEC("fireTriggerOne();"));
	MapKey(&Joystick, TG2, EXEC("fireTriggerTwo();"));
	
	MapKeyR(&Joystick, TG1, EXEC("releaseTriggerOne();"));
	MapKeyR(&Joystick, TG2, EXEC("releaseTriggerTwo();"));
	
	// Weapon Release
	
	MapKeyIO(&Joystick, S2, 
		ACT_HARDPOINTS,
		ACT_SECONDARY_FIRE
	);
	
	// MMC Button 
	MapKey(&Joystick, S1, PULSE+ACT_UI_BACK);
	
	// NWS Button 
	MapKey(&Joystick, S3, 0);
	
	// Pinkie Lever 
	MapKey(&Joystick, S4, 0); // DO NOT USE - Set as Shift IO
}

int initThrottle()
{
	// Coolie Switch 	
	
	MapKey(&Throttle, CSU, ACT_THRUST_UP);
	
	MapKey(&Throttle, CSR, ACT_THRUST_RIGHT);
	
	MapKey(&Throttle, CSD, ACT_THRUST_DOWN);
	
	MapKey(&Throttle, CSL, ACT_THRUST_LEFT);
	
	// Mic Switch 
	
	MapKeyIOUMD(&Throttle, MSU, 
		PULSE+ACT_TARGET_PREV_HOSTILE, PULSE+ACT_TARGET_PREV_SHIP,
		PULSE+ACT_TARGET_PREV_HOSTILE, PULSE+ACT_TARGET_PREV_SHIP,
		PULSE+ACT_TARGET_PREV_SHIP,    PULSE+ACT_TARGET_PREV_HOSTILE
	);
	
	MapKeyIO(&Throttle, MSR,
		PULSE+ACT_TARGET_NEXT_MODULE,  PULSE+ACT_TARGET_AHEAD
	);
	
	MapKeyIOUMD(&Throttle, MSD,
		PULSE+ACT_TARGET_NEXT_HOSTILE, PULSE+ACT_TARGET_NEXT_SHIP,
		PULSE+ACT_TARGET_NEXT_HOSTILE, PULSE+ACT_TARGET_NEXT_SHIP,
		PULSE+ACT_TARGET_NEXT_SHIP,    PULSE+ACT_TARGET_NEXT_HOSTILE
	);
	
	MapKeyIO(&Throttle, MSL,
		PULSE+ACT_TARGET_PREV_MODULE,  PULSE+ACT_TARGET_HIGHEST_THREAT
	);
	
	MapKey(&Throttle, MSP,
		PULSE+ACT_NEXT_SYSTEM_IN_ROUTE
	);
	
	// Landing Gear Horn Silence Button 
	MapKey(&Throttle, LDGH, EXEC("resupply();"));
	
	// Left Throttle Button
	MapKey(&Throttle, LTB, PULSE+ACT_THROTTLE_REVERSE_TOGGLE);
	
	// Slew Control 
	MapKeyUMD(&Throttle, SC,
		ACT_HEADLOOK,
		ACT_HEADLOOK,
		ACT_SECONDARY_FIRE
	);
	
	// Speed brake 
	
	MapKey(&Throttle, SPDB, ACT_FLIGHT_ASSIST_OFF);
	MapKey(&Throttle, SPDF, ACT_FLIGHT_ASSIST_OFF);
	MapKey(&Throttle, SPDM, 0);
	
	// Boat Switch 
	MapKey(&Throttle, BSF, PULSE+ACT_GALAXY_MAP);
	MapKey(&Throttle, BSB, PULSE+ACT_SYSTEM_MAP);
	MapKey(&Throttle, BSM, PULSE+ACT_UI_BACK);
	
	// China Hat 
	MapKey(&Throttle, CHF, ACT_THRUST_FORWARD);
	MapKey(&Throttle, CHB, ACT_THRUST_BACKWARD);
	MapKey(&Throttle, CHM, 0);
	
	// Auto Pilot 
	MapKey(&Throttle, APENG, TEMPO(
		EXEC("stowAndSupercruise(0);"),
		EXEC("stowAndSupercruise(1);"),
		DELAY_TEMPO
	));
	
	MapKey(&Throttle, APAH, EXEC("clearTriggerLock();"));
	MapKey(&Throttle, APPAT, 0); // Used by fireTrigger functions
	MapKey(&Throttle, APALT, 0); // Used by fireTrigger functions
	
	// Pinky Switch 
	MapKey(&Throttle, PSF, 0); // DO NOT USE - Up Layer
	MapKey(&Throttle, PSB, 0); // DO NOT USE - Down Layer
	MapKey(&Throttle, PSM, EXEC("clearTriggerLock();"));
	
	// EAC 
	MapKey(&Throttle, EACON,  PULSE+ACT_ORBIT_LINES);
	MapKey(&Throttle, EACOFF, PULSE+ACT_ORBIT_LINES);
	
	// RDR
	MapKey(&Throttle, RDRNRM, PULSE+ACT_LIGHTS_TOGGLE);
	MapKey(&Throttle, RDRDIS, PULSE+ACT_LIGHTS_TOGGLE);
	
	// APU
	MapKey(&Throttle, APUON,  EXEC("setAutoscan();"));
	MapKey(&Throttle, APUOFF, EXEC("setAutoscan();"));
	
	// ENG OPER 
	MapKey(&Throttle, EOLMOTOR, 0);
	MapKey(&Throttle, EOLIGN, PULSE+ACT_NIGHT_VISION);
	MapKey(&Throttle, EOLNORM, 0);
	MapKey(&Throttle, EORMOTOR, 0);
	MapKey(&Throttle, EORIGN, 0);
	MapKey(&Throttle, EORNORM, 0);
	
	// FUEL
	MapKey(&Throttle, EFLNORM, ACT_ROTATIONAL_CORRECTION);
	MapKey(&Throttle, EFRNORM, ACT_SILENT_RUNNING);
	MapKey(&Throttle, EFLOVER, 0);
	MapKey(&Throttle, EFROVER, 0);
	
	// Flaps 
	MapKey(&Throttle, FLAPU, EXEC("setJoystickCurve(0);"));
	MapKey(&Throttle, FLAPM, EXEC("setJoystickCurve(1);"));
	MapKey(&Throttle, FLAPD, EXEC("setJoystickCurve(2);"));
}
