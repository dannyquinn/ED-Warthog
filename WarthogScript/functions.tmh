int mapSlider()
{
	if (Throttle[EACON])
	{ 
		MapAxis(&Throttle, THR_FC, DX_THROTTLE_AXIS); 
	}
	else 
	{
		MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);
	}
}

int fireTriggerOne() 
{
	if (Throttle[BSF] | lockPrimaryFire) 
	{
		lockPrimaryFire = !lockPrimaryFire;
	} 
	
	ActKey(KEYON+DOWN+ACT_PRIMARY_FIRE);
}

int releaseTriggerOne()
{
	if (!lockPrimaryFire)
	{
		ActKey(KEYON+UP+ACT_PRIMARY_FIRE);
	}
}

int fireTriggerTwo() 
{
	if (Throttle[BSB]) 
	{
		ActKey(KEYON+DOWN+ACT_SECONDARY_FIRE);
	}
}

int releaseTriggerTwo() 
{
	if (!Joystick[S2] & !(Throttle[PSB] & Throttle[SC])) 
	{
		ActKey(KEYON+UP+ACT_SECONDARY_FIRE);
	}
}

int latchTriggerOne()
{
  lockPrimaryFire = !lockPrimaryFire;
  
  if (lockPrimaryFire) 
  {
    ActKey(KEYON+DOWN+ACT_PRIMARY_FIRE);
  }
  else 
  {
    ActKey(KEYON+UP+ACT_PRIMARY_FIRE);
  }
}

int latchTriggerTwo()
{
  lockSecondaryFire = !lockSecondaryFire;
  
  if (lockSecondaryFire)
  {
    ActKey(KEYON+DOWN+ACT_SECONDARY_FIRE);
  }
  else 
  {
    ActKey(KEYON+UP+ACT_SECONDARY_FIRE);
  }
}

int clearTriggerLock()
{
	if (lockPrimaryFire)
	{
		lockPrimaryFire = 0;
		ActKey(KEYON+UP+ACT_PRIMARY_FIRE);
	}
	if (lockSecondaryFire)
	{
    lockSecondaryFire = 0;
    ActKey(KEYON+UP+ACT_SECONDARY_FIRE);
	}
}

int EDStatusFlagsCallback(int data, int size)
{
	previousGameStatus = currentGameStatus;
	
	Map(&data, data);
	
	currentGameStatus = data;

	// Autoscan system when jumping in.  
	if (flag(FLAG_HUD_ANALYSIS_MODE) & flagDown(FLAG_FSD_JUMP) & Throttle[RDRNRM]) 
	{
		DeferCall(DELAY_WAIT, &ActKey, KEYON+DOWN+ACT_PRIMARY_FIRE);
		DeferCall(DELAY_WAIT+DELAY_SYSTEM_SCAN, &ActKey, KEYON+UP+ACT_PRIMARY_FIRE);
	}
	
	setLedState(LED1, flag(FLAG_HARDPOINTS_DEPLOYED));
	setLedState(LED2, flag(FLAG_CARGO_SCOOP_DEPLOYED));
	setLedState(LED3, flag(FLAG_LANDING_GEAR_DOWN));
	setLedState(LED4, Throttle[APUON] & flag(FLAG_HUD_ANALYSIS_MODE));
	setLedState(LED5, flag(FLAG_OVER_HEATING));
}

int flag(int flags)
{
	return (currentGameStatus & flags) == flags;
}

int previousFlag(int flags)
{
	return (previousGameStatus & flags) == flags;
}

int flagDown(int flags) 
{
	return !flag(flags) & previousFlag(flags);
}

int flagUp(int flags) 
{
	return flag(flags) & !previousFlag(flags);
}

int setAutoscan()
{
	setLedState(LED4, Throttle[APUON] & flag(FLAG_HUD_ANALYSIS_MODE));
}

int setLedState(int led, int state) 
{
	if (state) 
	{
		ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT+led));
	}
	else 
	{
		ActKey(KEYON+PULSE+LED(&Throttle, LED_ONOFF, LED_CURRENT-led));
	}
}

int setPipConfig(int pip1=0, int pip2=0, int pip3=0, int pip4=0) 
{
	if (!pip3) 
	{
		ActKey(KEYON+CHAIN(
			PULSE+ACT_PIP_RESET, D(),
			PULSE+pip1, D(),
			PULSE+pip2
		));
	} 
	else 
	{
		ActKey(KEYON+CHAIN(
			PULSE+ACT_PIP_RESET, D(),
			PULSE+pip1, D(),
			PULSE+pip2, D(),
			PULSE+pip3, D(),
			PULSE+pip4
		));
	}
}

int setJoystickCurve(int profile) 
{
	SetSCurve(&Joystick, JOYX, 0, 0, 0, JOY_CURVE[profile], JOY_ZOOM[profile]);
	SetSCurve(&Joystick, JOYY, 0, 0, 0, JOY_CURVE[profile], JOY_ZOOM[profile]);
}

int resupply() 
{
	ActKey(KEYON+CHAIN(
		PULSE+ACT_UI_SELECT, D(DELAY_SMALL),
		PULSE+ACT_UI_RIGHT,  D(DELAY_SMALL),
		PULSE+ACT_UI_SELECT, D(DELAY_SMALL),
		PULSE+ACT_UI_RIGHT,  D(DELAY_SMALL),
		PULSE+ACT_UI_SELECT, D(DELAY_SMALL),
		PULSE+ACT_UI_LEFT,   D(DELAY_SMALL),
		PULSE+ACT_UI_LEFT
	));
}

int stowAndSupercruise(int supercruise) 
{
	clearTriggerLock();
	setPipConfig(ENG, SYS, ENG, ENG);

	if (flag(FLAG_HARDPOINTS_DEPLOYED))
	{
		ActKey(KEYON+PULSE+ACT_HARDPOINTS);
	}
	
	if (flag(FLAG_CARGO_SCOOP_DEPLOYED))
	{
		ActKey(KEYON+PULSE+ACT_CARGO_SCOOP);
	}
	
	if (flag(FLAG_LANDING_GEAR_DOWN))
	{
		ActKey(KEYON+PULSE+ACT_LANDING_GEAR);
	}
	
  ActKey(KEYON+CHAIN(D(), PULSE+ACT_ENGINE_BOOST));
  
  if (supercruise) 
  {
  	ActKey(KEYON+CHAIN(D(), PULSE+ACT_SUPERCRUISE_TOGGLE));
  }
  else 
  {
  	ActKey(KEYON+CHAIN(D(), PULSE+ACT_SUPERCRUISE));
  }
}
